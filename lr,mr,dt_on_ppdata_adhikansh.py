# -*- coding: utf-8 -*-
"""LR,MR,DT on ppdata adhikansh

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cjMC4VsIdos-72YVQqb5KOR0aLVJlTWy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor, plot_tree
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

np.random.seed(0)
n_samples = 100
X1 = 2 * np.random.rand(n_samples, 1)
X2 = 3 * np.random.rand(n_samples, 1)
y = 4 + 3 * X1 + 2 * X2 + np.random.randn(n_samples, 1)

# Create a DataFrame
data = pd.DataFrame(np.hstack((X1, X2, y)), columns=['SepalLengthCm', 'PetalLengthCm', 'PetalWidthCm '])

data = pd.read_csv('Iris.csv')

data

print(data.head())

X = data[['SepalLengthCm','PetalLengthCm']]
y = data['Species']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

data.fillna(data.select_dtypes(include='number').mean(), inplace=True)

X = data[['SepalLengthCm','PetalLengthCm']]
y = data['Species']

# Convert species to numerical values using LabelEncoder
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_single = X_train[['SepalLengthCm']]
X_test_single = X_test[['SepalLengthCm']]

# Initialize and train the model
linear_model_single = LinearRegression()
linear_model_single.fit(X_train_single, y_train)

# Predict and evaluate
y_pred_single = linear_model_single.predict(X_test_single)
mse_single = mean_squared_error(y_test, y_pred_single)
r2_single = r2_score(y_test, y_pred_single)

print("Single Feature Linear Regression:")
print(f"Mean Squared Error: {mse_single}")
print(f"R-squared: {r2_single}")

linear_model_multi = LinearRegression()
linear_model_multi.fit(X_train, y_train)

# Predict and evaluate
y_pred_multi = linear_model_multi.predict(X_test)
mse_multi = mean_squared_error(y_test, y_pred_multi)
r2_multi = r2_score(y_test, y_pred_multi)

print("\nMultiple Linear Regression:")
print(f"Mean Squared Error: {mse_multi}")
print(f"R-squared: {r2_multi}")

dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)

# Predict and evaluate
y_pred_dt = dt_model.predict(X_test)
mse_dt = mean_squared_error(y_test, y_pred_dt)
r2_dt = r2_score(y_test, y_pred_dt)

print("\nDecision Tree Regression:")
print(f"Mean Squared Error: {mse_dt}")
print(f"R-squared: {r2_dt}")
#6. Visualize Decision Tree (Optional)

model = LogisticRegression()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# Print accuracy percentage
print(f"Accuracy Percentage: {accuracy * 100:.2f}%")

plt.figure(figsize=(20, 10))
plot_tree(dt_model, filled=True, feature_names=['SepalLengthCm', 'PetalLengthCm'], rounded=True)
plt.title('Decision Tree')
plt.show()